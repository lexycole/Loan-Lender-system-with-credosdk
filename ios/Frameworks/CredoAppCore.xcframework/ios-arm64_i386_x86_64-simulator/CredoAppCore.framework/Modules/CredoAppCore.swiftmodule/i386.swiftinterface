// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CredoAppCore
import AVFoundation
import Compression
import CoreLocation
import CoreTelephony
@_exported import CredoAppCore
import Foundation
import Swift
import UIKit
import _Concurrency
public enum CompressionAlgorithm {
  case zlib
  case lzfse
  case lzma
  case lz4
  public static func == (a: CredoAppCore.CompressionAlgorithm, b: CredoAppCore.CompressionAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Data {
  public func compress(withAlgorithm algo: CredoAppCore.CompressionAlgorithm) -> Foundation.Data?
}
final public class ModuleActor {
  public typealias Extractor = () -> CredoAppCore.AreaObject
  public typealias PermissionsReader = () -> ([Swift.String : Swift.Bool])
  public typealias PermissionsRequester = () -> ()
  final public var extractors: [Swift.String : CredoAppCore.ModuleActor.Extractor]
  final public var permissionsReader: CredoAppCore.ModuleActor.PermissionsReader
  final public var permissionsRequester: CredoAppCore.ModuleActor.PermissionsRequester
  public init(exctractors extractorsDict: [Swift.String : CredoAppCore.ModuleActor.Extractor], permissionsReader reader: @escaping CredoAppCore.ModuleActor.PermissionsReader, permissionsRequester requester: @escaping CredoAppCore.ModuleActor.PermissionsRequester)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ModuleContext {
  final public var actor: CredoAppCore.ModuleActor?
  @objc deinit
}
public struct ModuleVersionInfo {
  public init(version aVersion: Swift.String, versionCode code: Swift.String)
  public init(version aVersion: Swift.String, versionCode code: Swift.String, moduleName name: Swift.String)
}
public protocol Module {
  var versionInfo: CredoAppCore.ModuleVersionInfo { get }
  func attachTo(context: CredoAppCore.ModuleContext, arguments: [Swift.String : Any])
}
public protocol AreaObject {
  func getContent() -> Any
  func getDescription() -> Any
}
public enum CredoAppResult<T> {
  case success(T)
  case error(Swift.Int, Swift.String)
}
public protocol LocationRotating {
  func rotateLocation(latitudeOrigin: Swift.Double?, longitudeOrigin: Swift.Double?) -> (latitude: Swift.Double?, longitude: Swift.Double?)
}
public struct FlatAreaDescription {
  public init(mappings values: [Swift.Int])
  public func serializableReprezentation() -> Any
  public var mappings: [Swift.Int]
}
public class SubArea {
  public init()
  public func addValue(_ value: Any?)
  public func addSubArea(_ value: CredoAppCore.SubArea)
  public func addError(errorMessage: Swift.String)
  public func addAccessDeniedError(errorMessage: Swift.String)
  public func getContent() -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Area : CredoAppCore.SubArea, CredoAppCore.AreaObject {
  public static func areaWith(areaDescription description: Any) -> CredoAppCore.Area
  public static func failedAreaWith(extractError: Swift.String, areaDescription description: Any) -> CredoAppCore.AreaObject
  public static func failedAreaWith(accessError: Swift.String, areaDescription description: Any) -> CredoAppCore.AreaObject
  public func getDescription() -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CredoAppService {
  final public func execute(referenceNumber: Swift.String) -> CredoAppCore.CredoAppResult<Swift.Void>
  @_hasMissingDesignatedInitializers public class Builder {
    public init(url anURL: Swift.String, authKey key: Swift.String)
    public func addModule(_ module: CredoAppCore.Module) -> CredoAppCore.CredoAppService.Builder
    public func setForceResolvePermissions(_ force: Swift.Bool) -> CredoAppCore.CredoAppService.Builder
    public func build() -> CredoAppCore.CredoAppService
    @objc deinit
  }
  @objc deinit
}
extension CredoAppCore.CompressionAlgorithm : Swift.Equatable {}
extension CredoAppCore.CompressionAlgorithm : Swift.Hashable {}
